// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Turnero.DAL.Data;

#nullable disable

namespace Turnero.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250930211905_MedicalHistory")]
    partial class MedicalHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Turnero.DAL.Models.Allergies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Occurrency")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Turnero.DAL.Models.BreastCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("BreastCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Cancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Breast")
                        .HasColumnType("boolean");

                    b.Property<bool>("Colon")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Lung")
                        .HasColumnType("boolean");

                    b.Property<bool>("Melanoma")
                        .HasColumnType("boolean");

                    b.Property<bool>("None")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<bool>("Ovarian")
                        .HasColumnType("boolean");

                    b.Property<bool>("Pancreatic")
                        .HasColumnType("boolean");

                    b.Property<bool>("Prostate")
                        .HasColumnType("boolean");

                    b.Property<bool>("Uterine")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId")
                        .IsUnique();

                    b.ToTable("Cancer");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Cardiovascular", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Arrhythmia")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hypercholesterolemia")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hypertension")
                        .HasColumnType("boolean");

                    b.Property<bool>("MyocardialInfarction")
                        .HasColumnType("boolean");

                    b.Property<bool>("None")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<bool>("Stroke")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId")
                        .IsUnique();

                    b.ToTable("Cardiovascular");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Children", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId")
                        .IsUnique();

                    b.ToTable("Children");
                });

            modelBuilder.Entity("Turnero.DAL.Models.CholesterolDL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("CholesterolDL");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ColonoscopyCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("ColonoscopyCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ECGCardiacCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("ECGCardiacCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ECGCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("ECGCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ExamsGenHis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneralHistoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GeneralHistoryId")
                        .IsUnique();

                    b.ToTable("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Familiar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneralHistoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GeneralHistoryId");

                    b.ToTable("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.FamilyBackground", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GeneralHistoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GeneralHistoryId");

                    b.ToTable("FamilyBackgrounds");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Father", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId")
                        .IsUnique();

                    b.ToTable("Father");
                });

            modelBuilder.Entity("Turnero.DAL.Models.FluVaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("FluVaccine");
                });

            modelBuilder.Entity("Turnero.DAL.Models.GeneralHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("RiskFactors")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId")
                        .IsUnique();

                    b.ToTable("GeneralHistories");
                });

            modelBuilder.Entity("Turnero.DAL.Models.GynecoCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("GynecoCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Hemoglobin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("Hemoglobin");
                });

            modelBuilder.Entity("Turnero.DAL.Models.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LifestyleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId");

                    b.HasIndex("FamilyBackgroundId");

                    b.HasIndex("LifestyleId");

                    b.HasIndex("PatientId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Lifestyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alcohol")
                        .HasColumnType("boolean");

                    b.Property<string>("AlcoholType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CigarettesPerDay")
                        .HasColumnType("integer");

                    b.Property<bool>("DangerousActivities")
                        .HasColumnType("boolean");

                    b.Property<string>("DangerousActivitiesDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DrinksPerWeek")
                        .HasColumnType("integer");

                    b.Property<string>("DrugType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Drugs")
                        .HasColumnType("boolean");

                    b.Property<bool>("Excercise")
                        .HasColumnType("boolean");

                    b.Property<string>("ExcerciseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GeneralHistoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Smoking")
                        .HasColumnType("boolean");

                    b.Property<int>("TimesPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("TimesPerWeekExcercise")
                        .HasColumnType("integer");

                    b.Property<int>("YearsSmoking")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneralHistoryId");

                    b.ToTable("Lifestyle");
                });

            modelBuilder.Entity("Turnero.DAL.Models.MammographyCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("MammographyCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Medic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserGuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Metabolic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("DiabetesMellitus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("None")
                        .HasColumnType("boolean");

                    b.Property<bool>("Obesity")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<bool>("ThyroidDisease")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId")
                        .IsUnique();

                    b.ToTable("Metabolic");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Mother", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId")
                        .IsUnique();

                    b.ToTable("Mother");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Neurological", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Dementia")
                        .HasColumnType("boolean");

                    b.Property<bool>("Epilepsy")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Migraine")
                        .HasColumnType("boolean");

                    b.Property<bool>("None")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<bool>("Parkinson")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId")
                        .IsUnique();

                    b.ToTable("Neurological");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Others", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<string>("Relation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId");

                    b.ToTable("Others");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PSACheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("PSACheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AffiliateNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialWork")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PhysicCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("PhysicCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PneumoVaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("PneumoVaccine");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ProstaticCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("ProstaticCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Psychiatric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Anxiety")
                        .HasColumnType("boolean");

                    b.Property<bool>("BipolarDisorder")
                        .HasColumnType("boolean");

                    b.Property<bool>("Depression")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FamiliarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("None")
                        .HasColumnType("boolean");

                    b.Property<bool>("Other")
                        .HasColumnType("boolean");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<bool>("Schizophrenia")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FamiliarId")
                        .IsUnique();

                    b.ToTable("Psychiatric");
                });

            modelBuilder.Entity("Turnero.DAL.Models.RectalCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("RectalCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.RetinaCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<Guid>("ExamsGenHisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Normal")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotApplicable")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotNormal")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ExamsGenHisId")
                        .IsUnique();

                    b.ToTable("RetinaCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Siblings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Alive")
                        .HasColumnType("boolean");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FamilyBackgroundId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfSiblings")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FamilyBackgroundId")
                        .IsUnique();

                    b.ToTable("Siblings");
                });

            modelBuilder.Entity("Turnero.DAL.Models.TimeTurn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Time")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeTurns");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTurn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("MedicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("SocialWork")
                        .HasColumnType("text");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeId");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnero.DAL.Models.Allergies", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Turnero.DAL.Models.BreastCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("BreastCheck")
                        .HasForeignKey("Turnero.DAL.Models.BreastCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Cancer", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithOne("Cancer")
                        .HasForeignKey("Turnero.DAL.Models.Cancer", "FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Cardiovascular", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithOne("Cardiovascular")
                        .HasForeignKey("Turnero.DAL.Models.Cardiovascular", "FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Children", b =>
                {
                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithOne("Children")
                        .HasForeignKey("Turnero.DAL.Models.Children", "FamilyBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyBackground");
                });

            modelBuilder.Entity("Turnero.DAL.Models.CholesterolDL", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("CholesterolDL")
                        .HasForeignKey("Turnero.DAL.Models.CholesterolDL", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ColonoscopyCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("ColonoscopyCheck")
                        .HasForeignKey("Turnero.DAL.Models.ColonoscopyCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ContactInfo", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Patient", "Patient")
                        .WithOne("ContactInfo")
                        .HasForeignKey("Turnero.DAL.Models.ContactInfo", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ECGCardiacCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("ECGCardiacCheck")
                        .HasForeignKey("Turnero.DAL.Models.ECGCardiacCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ECGCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("ECGCheck")
                        .HasForeignKey("Turnero.DAL.Models.ECGCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ExamsGenHis", b =>
                {
                    b.HasOne("Turnero.DAL.Models.GeneralHistory", "GeneralHistory")
                        .WithOne("ExamsGenHis")
                        .HasForeignKey("Turnero.DAL.Models.ExamsGenHis", "GeneralHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralHistory");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Familiar", b =>
                {
                    b.HasOne("Turnero.DAL.Models.GeneralHistory", "GeneralHistory")
                        .WithMany()
                        .HasForeignKey("GeneralHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralHistory");
                });

            modelBuilder.Entity("Turnero.DAL.Models.FamilyBackground", b =>
                {
                    b.HasOne("Turnero.DAL.Models.GeneralHistory", "GeneralHistory")
                        .WithMany()
                        .HasForeignKey("GeneralHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralHistory");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Father", b =>
                {
                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithOne("Father")
                        .HasForeignKey("Turnero.DAL.Models.Father", "FamilyBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyBackground");
                });

            modelBuilder.Entity("Turnero.DAL.Models.FluVaccine", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("FluVaccine")
                        .HasForeignKey("Turnero.DAL.Models.FluVaccine", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.GeneralHistory", b =>
                {
                    b.HasOne("Turnero.DAL.Models.History", "History")
                        .WithOne("GeneralHistory")
                        .HasForeignKey("Turnero.DAL.Models.GeneralHistory", "HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Turnero.DAL.Models.GynecoCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("GynecoCheck")
                        .HasForeignKey("Turnero.DAL.Models.GynecoCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Hemoglobin", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("Hemoglobin")
                        .HasForeignKey("Turnero.DAL.Models.Hemoglobin", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.History", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithMany()
                        .HasForeignKey("FamiliarId");

                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithMany()
                        .HasForeignKey("FamilyBackgroundId");

                    b.HasOne("Turnero.DAL.Models.Lifestyle", "Lifestyle")
                        .WithMany()
                        .HasForeignKey("LifestyleId");

                    b.HasOne("Turnero.DAL.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");

                    b.Navigation("FamilyBackground");

                    b.Navigation("Lifestyle");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Lifestyle", b =>
                {
                    b.HasOne("Turnero.DAL.Models.GeneralHistory", "GeneralHistory")
                        .WithMany()
                        .HasForeignKey("GeneralHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralHistory");
                });

            modelBuilder.Entity("Turnero.DAL.Models.MammographyCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("MammographyCheck")
                        .HasForeignKey("Turnero.DAL.Models.MammographyCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Metabolic", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithOne("Metabolic")
                        .HasForeignKey("Turnero.DAL.Models.Metabolic", "FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Mother", b =>
                {
                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithOne("Mother")
                        .HasForeignKey("Turnero.DAL.Models.Mother", "FamilyBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyBackground");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Neurological", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithOne("Neurological")
                        .HasForeignKey("Turnero.DAL.Models.Neurological", "FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Others", b =>
                {
                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithMany("Others")
                        .HasForeignKey("FamilyBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyBackground");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PSACheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("PSACheck")
                        .HasForeignKey("Turnero.DAL.Models.PSACheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PhysicCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("PhysicCheck")
                        .HasForeignKey("Turnero.DAL.Models.PhysicCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.PneumoVaccine", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("PneumoVaccine")
                        .HasForeignKey("Turnero.DAL.Models.PneumoVaccine", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ProstaticCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("ProstaticCheck")
                        .HasForeignKey("Turnero.DAL.Models.ProstaticCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Psychiatric", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Familiar", "Familiar")
                        .WithOne("Psychiatric")
                        .HasForeignKey("Turnero.DAL.Models.Psychiatric", "FamiliarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Familiar");
                });

            modelBuilder.Entity("Turnero.DAL.Models.RectalCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("RectalCheck")
                        .HasForeignKey("Turnero.DAL.Models.RectalCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.RetinaCheck", b =>
                {
                    b.HasOne("Turnero.DAL.Models.ExamsGenHis", "ExamsGenHis")
                        .WithOne("RetinaCheck")
                        .HasForeignKey("Turnero.DAL.Models.RetinaCheck", "ExamsGenHisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Siblings", b =>
                {
                    b.HasOne("Turnero.DAL.Models.FamilyBackground", "FamilyBackground")
                        .WithOne("Siblings")
                        .HasForeignKey("Turnero.DAL.Models.Siblings", "FamilyBackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyBackground");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Turn", b =>
                {
                    b.HasOne("Turnero.DAL.Models.Medic", "Medic")
                        .WithMany("Turns")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnero.DAL.Models.Patient", null)
                        .WithMany("Turns")
                        .HasForeignKey("PatientId");

                    b.HasOne("Turnero.DAL.Models.TimeTurn", "Time")
                        .WithMany("Turns")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medic");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Turnero.DAL.Models.ExamsGenHis", b =>
                {
                    b.Navigation("BreastCheck");

                    b.Navigation("CholesterolDL");

                    b.Navigation("ColonoscopyCheck");

                    b.Navigation("ECGCardiacCheck");

                    b.Navigation("ECGCheck");

                    b.Navigation("FluVaccine");

                    b.Navigation("GynecoCheck");

                    b.Navigation("Hemoglobin");

                    b.Navigation("MammographyCheck");

                    b.Navigation("PSACheck");

                    b.Navigation("PhysicCheck");

                    b.Navigation("PneumoVaccine");

                    b.Navigation("ProstaticCheck");

                    b.Navigation("RectalCheck");

                    b.Navigation("RetinaCheck");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Familiar", b =>
                {
                    b.Navigation("Cancer");

                    b.Navigation("Cardiovascular");

                    b.Navigation("Metabolic");

                    b.Navigation("Neurological");

                    b.Navigation("Psychiatric");
                });

            modelBuilder.Entity("Turnero.DAL.Models.FamilyBackground", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Others");

                    b.Navigation("Siblings");
                });

            modelBuilder.Entity("Turnero.DAL.Models.GeneralHistory", b =>
                {
                    b.Navigation("ExamsGenHis");
                });

            modelBuilder.Entity("Turnero.DAL.Models.History", b =>
                {
                    b.Navigation("GeneralHistory");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Medic", b =>
                {
                    b.Navigation("Turns");
                });

            modelBuilder.Entity("Turnero.DAL.Models.Patient", b =>
                {
                    b.Navigation("ContactInfo");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("Turnero.DAL.Models.TimeTurn", b =>
                {
                    b.Navigation("Turns");
                });
#pragma warning restore 612, 618
        }
    }
}
